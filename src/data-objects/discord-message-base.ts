import { DiscordComponent } from '..';
import * as DiscordAPI from '../api/discord-api';
import { DiscordMessageType, Snowflake } from '../custom-types';
import { DiscordEmbed } from './discord-embed';
import { DiscordGuildMember } from './discord-guild-member';
import { DiscordMessageCreate } from './discord-message-create';
import { DiscordMessageEdit } from './discord-message-edit';
import { DiscordReaction } from './discord-reaction';
import { DiscordUser } from './discord-user';

export class DiscordMessageBase {

    /**
     * Id of the message
     */
    public id: Snowflake;

    /**
     * Id of the channel the message was sent in
     */
    public channel_id: Snowflake;

    /**
     * Id of the guild the message was sent in
     */
    public guild_id?: Snowflake;

    /**
     * The author of this message(not guaranteed to be a valid user, see below)
     */
    public author?: DiscordUser;

    /**
     * Partial guild member object, member properties for this message's author
     */
    public member?: DiscordGuildMember;

    /**
     * Contents of the message
     */
    public content?: string;

    /**
     * Timestamp when this message was sent
     */
    public timestamp?: string;

    /**
     * Timestamp when this message was edited(or null if never)
     */
    public edited_timestamp?: string;

    /**
     * Whether this was a TTS message
     */
    public tts: boolean = false;

    /**
     * Whether this message mentions everyone
     */
    public mention_everyone!: boolean;

    /**
     * Users specifically mentioned in the message
     */
    public mentions: DiscordUser[] = [];

    //     public mention_roles	array of role object ids	roles specifically mentioned in this message
    //     public mention_channels ?**** array of channel mention objects	channels specifically mentioned in this message
    //     public attachments	array of attachment objects	any attached files

    /**
     * Embedded content
     */
    public embeds: DiscordEmbed[] = [];

    /**
     * Reactions to the message
     */
    public reactions?: DiscordReaction;

    /**
     * used for validating a message was sent
     */
    public nonce?: number | string;

    /**
     * Whether this message is pinned
     */
    public pinned?: boolean;

    /**
     * If the message is generated by a webhook, this is the webhook's id
     */
    public webhook_id?: Snowflake;

    /**
     * Type of message
     */
    public type?: DiscordMessageType;

    //     public activity ? message activity object	sent with Rich Presence - related chat embeds
    //     public application ? partial application object	sent with Rich Presence - related chat embeds

    /**
     * If the message is a response to an Interaction, this is the id of the interaction's application
     */
    public application_id?: Snowflake;

    //     public message_reference ? message reference object	data showing the source of a crosspost, channel follow add, pin, or reply message

    /**
     * Message flags combined as a bitfield
     */
    public flags?: number;

    //     public referenced_message ?*****	? message object	the message associated with the message_reference
    //     public interaction ? message interaction object	sent if the message is a response to an Interaction
    //     public thread ? channel object	the thread that was started from this message, includes thread member object

    /**
     * Sent if the message contains components like buttons, action rows, or other interactive components
     */
    public components?: DiscordComponent[];
    
    //     public sticker_items ? array of message sticker item objects	sent if the message contains stickers
    //     public stickers ? array of sticker objects	Deprecated the stickers sent with the message

    // Message Update only returns `id`, `embeds`, `channel_id`, and `guild_id`
    constructor(id: Snowflake, channel_id: Snowflake) {
        this.id = id;
        this.channel_id = channel_id;
    }

    public reply(message: string): Promise<DiscordMessageBase> {
        return DiscordAPI.createMessage(
            this.channel_id,
            {
                content: message,
                message_reference:
                {
                    message_id: this.id,
                    channel_id: this.channel_id,
                    guild_id: this.guild_id
                }
            }
        );
    }

    public sendMessageInChannel(message: string): Promise<DiscordMessageBase> {
        return DiscordAPI.createMessage(this.channel_id, { content: message });
    }

    public sendInChannel(message: DiscordMessageCreate): Promise<DiscordMessageBase> {
        return DiscordAPI.createMessage(this.channel_id, message);
    }

    public edit(message: DiscordMessageEdit): Promise<DiscordMessageBase> {
        return DiscordAPI.editMessage(this.channel_id, this.id, message);
    }

    public react(emoji: string): Promise<void> {
        return DiscordAPI.addReaction(this.channel_id, this.id, emoji);
    }

    public removeAllReactions(): Promise<void> {
        return DiscordAPI.deleteAllReactions(this.channel_id, this.id);
    }
}